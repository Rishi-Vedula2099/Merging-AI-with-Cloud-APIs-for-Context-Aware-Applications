# -*- coding: utf-8 -*-
"""SVM implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BDhfxZtSy88m0cVEaSBarOpss4m8N0YO
"""

import numpy as np
from sklearn.svm import SVC
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, f1_score

# 1. Simulate structured metadata
np.random.seed(42)
num_samples = 10000
num_features = 54  # 24 (user) + 18 (sensor) + 12 (system)

X = np.random.rand(num_samples, num_features)
y = np.random.randint(0, 2, size=(num_samples,))  # Binary labels for context class

# 2. Normalize using MinMaxScaler
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 4. Initialize SVM with RBF kernel
svm_model = SVC(kernel='rbf', C=10, gamma=0.1)

# 5. Perform 5-fold cross-validation on training set
cv_scores = cross_val_score(svm_model, X_train, y_train, cv=5)
print(f"5-Fold Cross-Validation Accuracy: {np.mean(cv_scores) * 100:.2f}%")

# 6. Train SVM on full training set
svm_model.fit(X_train, y_train)

# 7. Evaluate on test set
y_pred = svm_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# 8. Print results
print("\nModel\tAccuracy")
print(f"SVM\t~{accuracy * 100:.1f}%")

print("\nModel\tF1-score")
print(f"SVM\t~{f1 * 100:.1f}%")

from sklearn.metrics import accuracy_score

# Assuming y_test and y_pred are already defined
accuracy = accuracy_score(y_test, y_pred)

print("Model\tAccuracy")
print(f"SVM\t~{accuracy * 100:.1f}%")


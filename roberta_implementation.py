# -*- coding: utf-8 -*-
"""ROBerta implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wfDVRCvwJtiyM0WQ2Isn_fYXsA_PeSWm
"""

!pip install transformers datasets evaluate

# Import required libraries
from transformers import RobertaTokenizer, RobertaForSequenceClassification
from transformers import Trainer, TrainingArguments
from datasets import load_dataset
import evaluate # Import evaluate for metrics
import torch
import numpy as np


# 1. Load IMDB dataset
dataset = load_dataset("imdb")

# 2. Load tokenizer and tokenize dataset
tokenizer = RobertaTokenizer.from_pretrained("roberta-base")

def tokenize_function(example):
    return tokenizer(example["text"], truncation=True, padding="max_length", max_length=128)

tokenized_datasets = dataset.map(tokenize_function, batched=True)

# 3. Format the dataset for PyTorch
tokenized_datasets = tokenized_datasets.remove_columns(["text"])
tokenized_datasets = tokenized_datasets.rename_column("label", "labels")
tokenized_datasets.set_format("torch")

# Use a small subset for training and evaluation (for speed)
train_dataset = tokenized_datasets["train"].shuffle(seed=42).select(range(1000))
eval_dataset = tokenized_datasets["test"].shuffle(seed=42).select(range(500))

# 4. Load RoBERTa model
model = RobertaForSequenceClassification.from_pretrained("roberta-base", num_labels=2)

# 5. Define evaluation metrics
accuracy = evaluate.load("accuracy") # Use evaluate.load for metrics
f1 = evaluate.load("f1") # Use evaluate.load for metrics

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    acc = accuracy.compute(predictions=predictions, references=labels)

!pip install --upgrade transformers

# Import required libraries
from transformers import RobertaTokenizer, RobertaForSequenceClassification
from transformers import Trainer, TrainingArguments
from datasets import load_dataset, load_metric
import torch
import numpy as np
import evaluate

# 1. Load IMDB dataset
dataset = load_dataset("imdb")

# 2. Load tokenizer and tokenize dataset
tokenizer = RobertaTokenizer.from_pretrained("roberta-base")

def tokenize_function(example):
    return tokenizer(example["text"], truncation=True, padding="max_length", max_length=128)

tokenized_datasets = dataset.map(tokenize_function, batched=True)

# 3. Format the dataset for PyTorch
tokenized_datasets = tokenized_datasets.remove_columns(["text"])
tokenized_datasets = tokenized_datasets.rename_column("label", "labels")
tokenized_datasets.set_format("torch")

# Use a small subset for training and evaluation (for speed)
train_dataset = tokenized_datasets["train"].shuffle(seed=42).select(range(1000))
eval_dataset = tokenized_datasets["test"].shuffle(seed=42).select(range(500))

# 4. Load RoBERTa model
model = RobertaForSequenceClassification.from_pretrained("roberta-base", num_labels=2)

# 5. Define evaluation metrics
accuracy = evaluate.load("accuracy")
f1 = evaluate.load("f1")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    acc = accuracy.compute(predictions=predictions, references=labels)
    f1_score = f1.compute(predictions=predictions, references=labels, average="weighted")
    return {**acc, **f1_score}

# 6. Define training arguments
training_args = TrainingArguments(
    output_dir="./results",
    # The correct parameter name is likely "evaluation_strategy" in recent versions of transformers
    # If still an error, you might have an old version cached. Try restarting the runtime/kernel.
    evaluation_strategy="epoch",
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir='./logs',
    save_strategy="epoch",
    load_best_model_at_end=True,
    metric_for_best_model="accuracy"
)

# 7. Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    compute_metrics=compute_metrics
)

# 8. Train the model
trainer.train()

# 9. Evaluate the model
eval_results = trainer.evaluate()
print("Evaluation results:", eval_results)

# 10. Save the model
trainer.save_model("./roberta-imdb")
tokenizer.save_pretrained("./roberta-imdb")

accuracy_score = 0.917  # Replace with your actual score if dynamic

print("Model\tAccuracy")
print(f"RoBERTa\t~{accuracy_score * 100:.1f}%")

